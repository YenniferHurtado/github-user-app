{"version":3,"sources":["images/github.png","components/UserData/UserData.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","UserData","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getUser","username","fetch","concat","then","response","json","state","id","avatar","url","location","repos","followers","following","e","preventDefault","refs","value","user","setState","login","avatar_url","html_url","repos_url","_this2","react_default","a","createElement","className","src","width","height","alt","github","ref","type","placeholder","onClick","handleSubmit","Component","User","components_UserData_UserData","App","components","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4SC+EzBC,cAxEX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJI,QAAU,SAACC,GACP,OAAOC,MAAK,gCAAAC,OAAiCF,IAC5CG,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACF,OAAOA,KAhBXZ,EAAKc,MAAQ,CACTN,SAAU,KACVO,GAAI,KACJC,OAAQ,KACRC,IAAK,KACLC,SAAU,KACVC,MAAO,KACPC,UAAW,KACXC,UAAW,MAVLrB,oHAsBKsB,gFACfA,EAAEC,0BACepB,KAAKI,QAAQJ,KAAKqB,KAAKhB,SAASiB,cAA7CC,SACJvB,KAAKwB,SAAS,CACVnB,SAAUkB,EAAKE,MACfb,GAAIW,EAAKX,GACTC,OAAQU,EAAKG,WACbZ,IAAKS,EAAKI,SACVX,MAAOO,EAAKK,UACZX,UAAWM,EAAKN,UAChBC,UAAWK,EAAKL,gJAIf,IACDK,EADCM,EAAA7B,KAqBL,OAnBIA,KAAKW,MAAMN,WACXkB,EACAO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKlC,KAAKW,MAAME,OAAQsB,MAAM,MAAMC,OAAO,MAAMC,IAAI,mBAC1DP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,SACWjC,KAAKW,MAAMN,SAClByB,EAAAC,EAAAC,cAAA,WAFJ,OAGShC,KAAKW,MAAMC,GAChBkB,EAAAC,EAAAC,cAAA,WAJJ,QAKUhC,KAAKW,MAAMG,IACjBgB,EAAAC,EAAAC,cAAA,WANJ,iBAOmBhC,KAAKW,MAAMK,MAC1Bc,EAAAC,EAAAC,cAAA,WARJ,eASiBhC,KAAKW,MAAMM,UACxBa,EAAAC,EAAAC,cAAA,WAVJ,aAWehC,KAAKW,MAAMO,aAK9BY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAKI,IAAQD,IAAI,eAClDP,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBAAgBM,IAAI,WAAWC,KAAK,OAAOC,YAAY,qCAE5EX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeS,QAAS,SAAAvB,GAAC,OAAIU,EAAKc,aAAaxB,KAAjE,YACAW,EAAAC,EAAAC,cAAA,WACMT,WAnECqB,aCIRC,EANF,kBACTf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACc,EAAD,QCOOC,MARf,WACE,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgB,EAAD,QCKcC,QACW,cAA7BC,OAAOnC,SAASoC,UAEe,UAA7BD,OAAOnC,SAASoC,UAEhBD,OAAOnC,SAASoC,SAASC,MACvB,2DCXNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.6bdacc96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.b874ac62.png\";","\nimport React, { Component } from 'react';\nimport './styles.css'\nimport github from '../../images/github.png'\n\nclass UserData extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            username: null,\n            id: null,\n            avatar: null,\n            url: null,\n            location: null,\n            repos: null,\n            followers: null,\n            following: null,\n        }\n    }\n\n    getUser = (username) => {\n        return fetch(`https://api.github.com/users/${username}`)\n        .then(response => response.json())\n        .then(response => {\n            return response;\n        })\n    }    \n\n    async handleSubmit(e) {\n        e.preventDefault();\n        let user = await this.getUser(this.refs.username.value);\n        this.setState({\n            username: user.login, \n            id: user.id, \n            avatar: user.avatar_url,\n            url: user.html_url,\n            repos: user.repos_url,\n            followers: user.followers,\n            following: user.following,\n        })\n    }\n\n    render() {\n        let user;\n        if (this.state.username) {\n            user = \n            <div className=\"user_results\">\n                <img src={this.state.avatar} width='128' height='128' alt=\"avatar-profile\"/>\n                <div className=\"box_results\"> \n                    User: {this.state.username} \n                    <br/>\n                    Id: {this.state.id} \n                    <br/>\n                    Url: {this.state.url}\n                    <br/>\n                    Repositorios: {this.state.repos}\n                    <br/>\n                    Seguidores: {this.state.followers}     \n                    <br/>\n                    Seguidos: {this.state.following}\n                </div>\n            </div>\n        }\n        return(\n            <div className=\"userDataCont\">\n                <img className='tittle_userData' src={github} alt=\"img-tittle\"/>\n                <form>\n                    <input className=\"form_userData\" ref=\"username\" type=\"text\" placeholder=\"Ingresa el nombre de usuario...\"/>\n                </form>\n                <button className=\"btn_userData\" onClick={e => this.handleSubmit(e)}> SEARCH </button>\n                <div>\n                    { user }\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default UserData;\n","import React from 'react';\nimport UserData from './UserData/UserData'\n\nconst User = () => (\n    <div>\n        <UserData />\n    </div>\n);\n\nexport default User;","import React from 'react';\nimport './App.css';\nimport User from './components/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <User />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}